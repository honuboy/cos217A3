Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Jonah Johnson

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. 
Such documents include the course's lecture slides and precept handouts.

The course's textbooks and reference manuals.

The man pages on the armlab cluster.


------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None

------------------------------------------------------------------------
In fulfillment of the requirement from section 2.4.3 of the Academic
Regulations in Princeton's Rights, Rules, Responsibilities guide,
enter your name in the space below the following affirmation:

This paper represents my own work in accordance with University
regulations.

/s/ Jonah Johnson

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

Man I spent a long time on just the remove function and the hash table
just clearing up some bugs, but as soon as I did things went so quickly!

I feel like I relearned many things (ADTs, symtable, hashtable) that
we learned in COS 126, though I definitely got a much deeper grasp
of pointers and DMM. 

Can't say it was incredibly fun, I didn't feel it was as fun as some 
assignments that feel more applicable in the moment (though I get how
critical these ADTs are in the real world)

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."



------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."



------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.011388 seconds.
-- 5000 bindings consumed 1.744229 seconds.
-- 50000 bindings consumed 178.847031 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.001666 seconds.
-- 5000 bindings consumed 0.012995 seconds.
-- 50000 bindings consumed 0.482495 seconds.
-- 500000 bindings consumed 82.115358 seconds.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.006189 seconds.
-- 50000 bindings consumed 0.147867 seconds.
-- 500000 bindings consumed 1.847636 seconds.